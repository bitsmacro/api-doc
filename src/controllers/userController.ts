/**
 * DoctorSabLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  DocSaabCreateUserNote,
  docSaabCreateUserNoteSchema,
} from '../models/docSaabCreateUserNote';
import {
  DocSaabCreateUserNoteRequest,
  docSaabCreateUserNoteRequestSchema,
} from '../models/docSaabCreateUserNoteRequest';
import {
  DocSaabDeleteNoteForUserWithNoteId,
  docSaabDeleteNoteForUserWithNoteIdSchema,
} from '../models/docSaabDeleteNoteForUserWithNoteId';
import {
  DocSaabGetDetailOfUserNotes,
  docSaabGetDetailOfUserNotesSchema,
} from '../models/docSaabGetDetailOfUserNotes';
import {
  DocSaabGetListOfUserNotes,
  docSaabGetListOfUserNotesSchema,
} from '../models/docSaabGetListOfUserNotes';
import {
  DocSaabSignupForNewUserRequest,
  docSaabSignupForNewUserRequestSchema,
} from '../models/docSaabSignupForNewUserRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class UserController extends BaseController {
  /**
   * localhost:8080/v1/user/signup
   *
   * @param accept
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async docSaabSignupForNewUser(
    accept: string,
    contentType: string,
    body: DocSaabSignupForNewUserRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/user/signup');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
      body: [body, docSaabSignupForNewUserRequestSchema],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * localhost:8080/v1/user/bdb2f1f6-3555-4ca6-ae24-08607af09071
   *
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabGetUserDetails(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/user/ef31afe7-d1b5-465c-a0e7-774919dae094'
    );
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.call(requestOptions);
  }

  /**
   * localhost:8080/v1/users
   *
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabGetListOfUsers(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/users');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.call(requestOptions);
  }

  /**
   * localhost:8080/v1/user/me
   *
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabGetUserProfile(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/user/me');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.call(requestOptions);
  }

  /**
   * localhost:8080/v1/notes
   *
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabGetListOfUserNotes(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DocSaabGetListOfUserNotes>> {
    const req = this.createRequest('GET', '/note/user');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.callAsJson(docSaabGetListOfUserNotesSchema, requestOptions);
  }

  /**
   * localhost:8080/v1/note
   *
   * @param accept
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async docSaabCreateUserNote(
    accept: string,
    contentType: string,
    body: DocSaabCreateUserNoteRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DocSaabCreateUserNote>> {
    const req = this.createRequest('POST', '/note/user');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
      body: [body, docSaabCreateUserNoteRequestSchema],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.callAsJson(docSaabCreateUserNoteSchema, requestOptions);
  }

  /**
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabDeleteNoteForUserWithNoteId(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DocSaabDeleteNoteForUserWithNoteId>> {
    const req = this.createRequest(
      'DELETE',
      '/note/user/2643deba-a33f-4946-bb73-0238ef7695b0'
    );
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.callAsJson(
      docSaabDeleteNoteForUserWithNoteIdSchema,
      requestOptions
    );
  }

  /**
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabGetDetailOfUserNotes(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DocSaabGetDetailOfUserNotes>> {
    const req = this.createRequest(
      'GET',
      '/note/user/2643deba-a33f-4946-bb73-0238ef7695b0'
    );
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.callAsJson(docSaabGetDetailOfUserNotesSchema, requestOptions);
  }
}
