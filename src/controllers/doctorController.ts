/**
 * DoctorSabLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  DocSaabCreateDoctorNoteRequest,
  docSaabCreateDoctorNoteRequestSchema,
} from '../models/docSaabCreateDoctorNoteRequest';
import {
  DocSaabCreateDoctorRequest,
  docSaabCreateDoctorRequestSchema,
} from '../models/docSaabCreateDoctorRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class DoctorController extends BaseController {
  /**
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabDeleteNoteForDoctorWithNoteId(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'DELETE',
      '/note/doctor/28d08b38-6771-4234-ae0c-390954fc4fdf'
    );
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.call(requestOptions);
  }

  /**
   * localhost:8080/v1/notes
   *
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabGetListOfDoctorNotes(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/note/doctor');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.call(requestOptions);
  }

  /**
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabGetDetailOfDoctorNotes(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/note/doctor/28d08b38-6771-4234-ae0c-390954fc4fdf'
    );
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.call(requestOptions);
  }

  /**
   * localhost:8080/v1/note
   *
   * @param accept
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async docSaabCreateDoctorNote(
    accept: string,
    contentType: string,
    body: DocSaabCreateDoctorNoteRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/note/doctor');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
      body: [body, docSaabCreateDoctorNoteRequestSchema],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * localhost:8080/v1/doctor/create
   *
   * @param accept
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async docSaabCreateDoctor(
    accept: string,
    contentType: string,
    body: DocSaabCreateDoctorRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/doctor/create');
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
      body: [body, docSaabCreateDoctorRequestSchema],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * localhost:8080/v1/doctor/f499e4b4-69af-445b-8c7f-5a42817a863e
   *
   * @param accept
   * @param contentType
   * @return Response from the API call
   */
  async docSaabGetDoctorDetails(
    accept: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/doctor/ef31afe7-d1b5-465c-a0e7-774919dae094'
    );
    const mapped = req.prepareArgs({
      accept: [accept, string()],
      contentType: [contentType, string()],
    });
    req.header('Accept', mapped.accept);
    req.header('Content-Type', mapped.contentType);
    return req.call(requestOptions);
  }

  /**
   * localhost:8080/v1/doctors
   *
   * @return Response from the API call
   */
  async docSaabGetListOfDoctors(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/doctors');
    return req.call(requestOptions);
  }
}
